buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenLocal()
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

ext {
    vertxVersion = '4.0.0'
    hazelcastVersion = "2.2.1"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def mainVerticleName = 'io.trovefinance.Launcher'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'
def conf = 'config.json'

application {
    mainClassName = 'org.example.EventBusSendNotRecordedAsSpans'
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    implementation "io.vertx:vertx-unit:$vertxVersion"
    testCompile "io.vertx:vertx-junit5:$vertxVersion"
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-codegen:$vertxVersion"
    compile "io.vertx:vertx-zipkin:$vertxVersion"
    compile 'io.zipkin.brave:brave:5.6.0'
    compile 'io.zipkin.brave:brave-context-log4j2:5.6.0'
    compile 'io.zipkin.brave:brave-context-slf4j:5.6.0'
    compile "io.vertx:vertx-service-proxy:$vertxVersion"
    compile "io.vertx:vertx-service-discovery:$vertxVersion"
    compile "io.vertx:vertx-service-discovery-bridge-kubernetes:$vertxVersion"
    compile "io.vertx:vertx-config-kubernetes-configmap:$vertxVersion"
    compile "io.vertx:vertx-hazelcast:$vertxVersion"
    compile group: "com.hazelcast", name: "hazelcast-kubernetes", version: "$hazelcastVersion"

    annotationProcessor "io.vertx:vertx-codegen:$vertxVersion"
    annotationProcessor "io.vertx:vertx-service-proxy:$vertxVersion"
    annotationProcessor "io.vertx:vertx-sql-client-templates:$vertxVersion"

    testCompile "io.vertx:vertx-junit5:$vertxVersion"
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
}

sourceSets {
    main {
        java {
            srcDirs += 'src/main/generated'
        }
    }
    integration {
        java.srcDir "$projectDir/src/integration/java"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes 'Main-Verticle': mainVerticleName
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

check.dependsOn integrationTest

run {
    args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--conf=$conf", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange", "--ha"]
}

apply plugin: "com.github.johnrengelman.shadow"